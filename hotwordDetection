#!/usr/bin/env python
import snowboydecoder
import sys
import signal
import os
import argparse


# ==================================
# get parameters
# ==================================

#TOP_DIR = os.path.dirname(os.path.abspath(__file__))
#model = os.path.join(TOP_DIR, "alexa.umdl")
interrupted = False
model= "/opt/hotwordDetection/alexa.umdl"
action= ""

parser = argparse.ArgumentParser(description='Use snowboy to detect a hotword (hey alexa) and trigger a command')
parser.add_argument('--model',  help='snowboy .umdl model (default alexa.umdl)')
parser.add_argument('--action', help='Action to execute (required)')
args = parser.parse_args()

if (args.model):
    #print ("Set model "+str(args.model))
    model = args.model

if (args.action):
    #print ("set action "+str(args.action))
    action = args.action

if (not action):
    parser.print_help()
    sys.exit(-1)

if (not model):
    parser.print_help()
    sys.exit(-1)

if (not os.path.isfile(model)):
    parser.print_help()
    sys.exit(-1)




# ==================================
# callbacks
# ==================================

def signal_handler(signal, frame):
    global interrupted
    interrupted = True

def interrupt_callback():
    global interrupted
    return interrupted

def do_action():
    global command
    print('Hotword detected')
    os.system(action)
    print('Listening... Press Ctrl+C to exit')


# ==================================
# Main loop
# ==================================

print ("Start hotword detection")
print ("model:  "+str(model))
print ("action: "+str(action))

# capture SIGINT signal, e.g., Ctrl+C
signal.signal(signal.SIGINT, signal_handler)

detector = snowboydecoder.HotwordDetector(model, sensitivity=0.5)
print('Listening... Press Ctrl+C to exit')

# main loop
detector.start(detected_callback=do_action,
               interrupt_check=interrupt_callback,
               sleep_time=0.03)

detector.terminate()
